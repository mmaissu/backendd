from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import JSONResponse
import json
import hashlib
from typing import Optional
from redis_client import get_cache_manager
import logging

logger = logging.getLogger(__name__)

class CacheMiddleware(BaseHTTPMiddleware):
    def __init__(self, app, cache_routes: Optional[list] = None, ttl: int = 300):
        super().__init__(app)
        self.cache_routes = cache_routes or ["/notes", "/users"]
        self.ttl = ttl
    
    async def dispatch(self, request: Request, call_next):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç
        if not self._should_cache(request.url.path, request.method):
            return await call_next(request)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫–µ—à–∞
        cache_key = self._generate_cache_key(request)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à–∞
        cache_manager = await get_cache_manager()
        
        # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if request.method == "GET":
            cached_response = await cache_manager.get(cache_key)
            if cached_response:
                logger.info(f"üîÑ Returning cached response for {request.url.path}")
                return JSONResponse(
                    content=cached_response,
                    status_code=200,
                    headers={"X-Cache": "HIT"}
                )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)
        
        # –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ GET –æ—Ç–≤–µ—Ç—ã
        if request.method == "GET" and response.status_code == 200:
            try:
                response_body = b""
                async for chunk in response.body_iterator:
                    response_body += chunk
                
                # –ü–∞—Ä—Å–∏–º JSON –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    json_data = json.loads(response_body.decode())
                    await cache_manager.set(cache_key, json_data, self.ttl)
                    logger.info(f"üíæ Cached response for {request.url.path}")
                except json.JSONDecodeError:
                    logger.warning(f"Could not cache non-JSON response for {request.url.path}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π response —Å —Ç–µ–º –∂–µ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                return JSONResponse(
                    content=json_data,
                    status_code=200,
                    headers={"X-Cache": "MISS"}
                )
            except Exception as e:
                logger.error(f"Error caching response: {e}")
        
        # –î–ª—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
        elif request.method in ["POST", "PUT", "DELETE", "PATCH"]:
            await self._invalidate_cache(request.url.path, cache_manager)
        
        return response
    
    def _should_cache(self, path: str, method: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
        # –ö–µ—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        if method != "GET":
            return False
        
        return any(route in path for route in self.cache_routes)
    
    def _generate_cache_key(self, request: Request) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫–µ—à–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        # –ë–∞–∑–æ–≤—ã–π –∫–ª—é—á
        key_parts = [request.method, request.url.path]
        
        # –î–æ–±–∞–≤–ª—è–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if request.query_params:
            query_string = str(request.query_params)
            key_parts.append(query_string)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        auth_header = request.headers.get("authorization")
        if auth_header:
            key_parts.append(auth_header)
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à
        key_string = "|".join(key_parts)
        return f"cache:{hashlib.md5(key_string.encode()).hexdigest()}"
    
    async def _invalidate_cache(self, path: str, cache_manager):
        """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–µ—à –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏"""
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –ø—É—Ç–µ–º
            pattern = f"cache:*"
            await cache_manager.delete_pattern(pattern)
            logger.info(f"üóëÔ∏è Invalidated cache for path: {path}")
        except Exception as e:
            logger.error(f"Error invalidating cache: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è middleware
def create_cache_middleware(app, cache_routes: Optional[list] = None, ttl: int = 300):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç middleware –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return CacheMiddleware(app, cache_routes, ttl) 